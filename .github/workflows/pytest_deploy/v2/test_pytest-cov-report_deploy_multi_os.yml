name: pytest-cov Report and Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - pytest-testmon ワークフローの完了後に repository_dispatch イベントで起動
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップ
#    - Ubuntu, macOS, Windowsの最新バージョンで実行
#    - Python 3.11と3.12を使用
# 3. 各OS・Pythonバージョンごとに個別の.testmondataファイルを取得
# 4. testmonの結果に基づいてテストをスキップするかどうかを確認
# 5. pytest-covを使用してカバレッジレポートを生成
#    - 各OS環境とPythonバージョンごとに別々のレポートを生成
# 6. カバレッジ結果のアップロード
#    - 常に実行（テストが失敗した場合も含む）
# 7. 全テスト結果の確認
#    - いずれかのテストが失敗した場合、エラーを報告
# 8. GitHub Pagesへのデプロイ
#    - すべてのテストが成功した場合のみ実行
#    - 変更がある場合のみ実際にデプロイを行う
#    - リモートの最新の変更を取得し、コンフリクトを解決してからプッシュ
# 9. デプロイしたレポートのURL生成
# 10. 変更の有無に応じたLINE通知の送信
#     - 変更があった場合と変更がなかった場合で異なるメッセージを送信

on:
  repository_dispatch:
    types: [run-pytest-cov]

jobs:
  test-and-coverage:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        #python-version: ['3.11','3.12']
        python-version: ['3.12']
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Fetch testmon data
        shell: bash
        run: |
          echo "Fetching testmon data..."
          git fetch origin ghpages:ghpages || true
          folder_name="testmon-data_${{ matrix.os }}_python_${{ matrix.python-version }}"
          git checkout ghpages -- $folder_name/.testmondata || true
          if [ -f $folder_name/.testmondata ]; then
            echo "Testmon data found. Moving to current directory."
            mv $folder_name/.testmondata .testmondata
          else
            echo "No testmon data found for ${{ matrix.os }} with Python ${{ matrix.python-version }}."
          fi
        continue-on-error: true

      - name: Check if tests should be executed
        id: check_tests
        shell: bash
        run: |
          if [ -f .testmondata ] && [ "${{ github.event.client_payload.skip_tests }}" != "true" ]; then
            echo "Running pytest-testmon to check if tests should be executed..."
            if poetry run pytest --testmon --testmon-noselect -v | grep -q "collected 0 items"; then
              echo "No tests need to be executed."
              echo "skip_tests=true" >> $GITHUB_OUTPUT
            else
              echo "Tests need to be executed."
              echo "skip_tests=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No .testmondata file found or tests are forced to run."
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests with pytest-cov
        if: steps.check_tests.outputs.skip_tests != 'true'
        id: pytest-cov
        run: |
          mkdir -p htmlcov_${{ matrix.os }}_python_${{ matrix.python-version }}
          poetry run pytest --cov=project_a --cov-report=html:htmlcov_${{ matrix.os }}_python_${{ matrix.python-version }}
        shell: bash

      - name: Upload pytest-cov results
        uses: actions/upload-artifact@v4.4.0
        with:
          name: coverage-results-${{ matrix.os }}-python-${{ matrix.python-version }}
          path: htmlcov_${{ matrix.os }}_python_${{ matrix.python-version }}
        if: always()

  check_all_tests:
    needs: test-and-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test-and-coverage.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  deploy:
    needs: [test-and-coverage, check_all_tests]
    runs-on: ubuntu-latest
    outputs:
      deploy_status: ${{ steps.check_and_deploy.outputs.deploy_status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Download pytest-cov artifacts
        uses: actions/download-artifact@v4.1.8

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check and Deploy to GitHub Pages
        id: check_and_deploy
        run: |
          git fetch origin ghpages:ghpages || git checkout -b ghpages
          git checkout ghpages
          git pull origin ghpages --rebase

          changes_made=false
          for os in ubuntu-latest macos-13 windows-latest; do
            #for python_version in 3.11 3.12; do
            for python_version in 3.12; do
              folder_name="pytest-cov-report_${os}_python_${python_version}"
              if [ -d coverage-results-$os-python-$python_version ]; then
                if [ ! -d $folder_name ] || ! diff -r coverage-results-$os-python-$python_version $folder_name > /dev/null; then
                  echo "Changes detected for $os with Python $python_version, updating..."
                  rm -rf $folder_name
                  mv coverage-results-$os-python-$python_version $folder_name
                  git add $folder_name
                  changes_made=true
                else
                  echo "No changes for $os with Python $python_version, skipping..."
                fi
              else
                echo "No pytest-cov report found for $os with Python $python_version"
              fi
            done
          done

          if [ "$changes_made" = true ]; then
            git commit -m "Update pytest-cov reports on GitHub Pages"
            # Try to push changes, if fails, pull and retry
            if ! git push origin ghpages; then
              git pull origin ghpages --rebase
              git push origin ghpages
            fi
            echo "deploy_status=updated" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> $GITHUB_OUTPUT
          fi

      - name: Generate URL list
        id: generate_url_list
        run: |
          IFS='/' read -ra REPO_INFO <<< "$GITHUB_REPOSITORY"
          REPO_OWNER=${REPO_INFO[0]}
          REPO_NAME=${REPO_INFO[1]}
          URL_LIST=""
          for os in ubuntu-latest macos-13 windows-latest; do
            #for python_version in 3.11 3.12; do
            for python_version in 3.12; do
              URL_LIST="${URL_LIST}pytest-cov-report_${os}_python_${python_version}:\n\
            https://${REPO_OWNER}.github.io/${REPO_NAME}/pytest-cov-report_${os}_python_${python_version}/index.html\n\n"
            done
          done
          echo "url_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$URL_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send LINE Notify (Updated)
        if: steps.check_and_deploy.outputs.deploy_status == 'updated'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-cov report deployment completed. Changes were made.

          Check URLs:
          ${{ steps.generate_url_list.outputs.url_list }}"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"

      - name: Send LINE Notify (No Changes)
        if: steps.check_and_deploy.outputs.deploy_status == 'unchanged'
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="pytest-cov report check completed. No changes were necessary."

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"
