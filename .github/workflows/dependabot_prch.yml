name: Dependabot PR Check

# 処理の流れ:
#  1. Dependabotがプルリクエストを作成
#  2. このワークフローが自動的に実行される
#  3. 必要な環境（Python, Poetry）をセットアップ
#  4. 依存関係をインストールし、基本的なテストを実行
#  5. PRのマージ可能状態を確認するための待機時間を設ける
#  6. PRのマージ可能性を複数回チェック
#  7. マージ可能であれば成功、そうでなければ失敗を報告
#  8. 開発者がワークフローの結果を確認
#  9. 問題がなければ、開発者が手動でプルリクエストを承認しマージ

on:
  pull_request:
    branches: [ main ]

jobs:
  dependabot-check:
    # Dependabotによって作成されたPRの場合のみ実行
    if: ${{ github.actor == 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Tokyo'
    steps:
      # リポジトリのチェックアウト
      - uses: actions/checkout@v4

      # Pythonのセットアップ
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Poetryのインストール
      - name: Install poetry
        run: pip install poetry

      # 依存関係のインストール
      - name: Install dependencies
        run: poetry install

      # 基本的なテストの実行
      - name: Run basic tests
        run: poetry run pytest

      # PRのマージ可能状態を確認するための待機
      - name: Wait for mergeable status
        run: |
          echo "Waiting for 60 seconds to allow GitHub to update PR status..."
          sleep 60

      # PRのマージ可能性チェック
      - name: Check if PR is mergeable
        if: success()
        run: |
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          for i in {1..5}; do
            echo "Attempt $i to check if PR is mergeable..."
            mergeable=$(gh pr view $pr_number --json mergeable -q .mergeable)
            if [ "$mergeable" = "true" ]; then
              echo "PR is mergeable"
              exit 0
            fi
            echo "PR is not yet mergeable, waiting for 30 seconds before next attempt..."
            sleep 30
          done
          echo "PR is not mergeable after 5 attempts"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# 注意: このワークフローは自動マージを行いません。
# マージの決定と実行は、開発者が手動で行う必要があります。
