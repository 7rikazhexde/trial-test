name: test branch

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "coverage"
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [macos-12, ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - name: Install poetry
        run: pip install poetry
      - name: Poetry setup
        run: poetry install
      - name: Run test
        id: pytest
        continue-on-error: true
        run: poetry run pytest --durations=0 --junitxml=pytest.xml --cov-report "xml:coverage.xml" --cov=calculator tests/ | tee pytest-coverage.txt
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-coverage.txt
            coverage.xml
            pytest.xml

  update_readme:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install xq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install yq
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Update README in coverage branch
        run: |
          if git ls-remote --heads origin coverage | grep coverage; then
            git checkout coverage
          else
            git checkout --orphan coverage
            git rm -rf .
          fi
          echo "# Coverage Reports" > README.md
          echo "[![](https://github.com/$GITHUB_REPOSITORY/actions/workflows/test_branch.yml/badge.svg)](https://github.com/$GITHUB_REPOSITORY/actions/workflows/test_branch.yml)" >> README.md
          echo "" >> README.md
          for os in macos-12 ubuntu-latest windows-latest; do
            for version in 3.10 3.11; do
              echo "## Pytest Result Summary (os: $os / python-version: $version)" >> README.md
              if [ -f "coverage-data-$os-$version/pytest.xml" ]; then
                xq -r '.testsuite["@errors"], .testsuite["@failures"], .testsuite["@skipped"], .testsuite["@tests"], .testsuite["@time"]' coverage-data-$os-$version/pytest.xml |
                awk '{printf "| %d | %d :zzz: | %d :x: | %d :fire: | %.3fs :stopwatch: |\n", $4, $3, $2, $1, $5}' >> README.md
              else
                echo "No pytest.xml file found for $os - $version" >> README.md
              fi
              echo "" >> README.md
              if [ -f "coverage-data-$os-$version/coverage.xml" ]; then
                coverage=$(xq -r '.coverage["@line-rate"]' coverage-data-$os-$version/coverage.xml)
                coverage_percent=$(echo "$coverage * 100" | bc)
                echo "<a href=\"https://github.com/$GITHUB_REPOSITORY/blob/$GITHUB_SHA/README.md\"><img alt=\"coverage\" src=\"https://img.shields.io/badge/coverage-${coverage_percent}%25-brightgreen.svg\" /></a>" >> README.md
              else
                echo "No coverage.xml file found for $os - $version" >> README.md
              fi
              echo "<details><summary>Coverage Report </summary>" >> README.md
              if [ -f "coverage-data-$os-$version/pytest-coverage.txt" ]; then
                cat coverage-data-$os-$version/pytest-coverage.txt >> README.md
              else
                echo "No pytest-coverage.txt file found for $os - $version" >> README.md
              fi
              echo "</details>" >> README.md
              echo "" >> README.md
            done
          done
          commit_hash=${GITHUB_SHA::8}
          commit_link="[$commit_hash](https://github.com/$GITHUB_REPOSITORY/tree/$commit_hash)"
          echo -e "> [!Note]" >> README.md
          echo -e "> " >> README.md
          echo -e "> Commit: $commit_link" >> README.md
          echo -e "> " >> README.md
          echo "> Click on the \`test summary\` badge above to see the results of running pytest on multiple hosts." >> README.md
      - name: Commit and push
        run: |
          git config --local user.email "33836132+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update coverage for all environments"
          git push origin coverage
