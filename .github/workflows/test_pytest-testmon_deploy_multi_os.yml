name: pytest-testmon Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - mainブランチへのプッシュ
#    - Dependabotによる実行でないこと
#    - コミットメッセージが"Bump version"で始まっていないこと
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップと.testmondataの取得
# 3. pytest-testmonを使用してテストを実行
# 4. .testmondataファイルの確認と指定フォルダへの移動
# 5. 更新された.testmondataファイルのアップロード
# 6. GitHub Pagesへの.testmondataファイルのデプロイ
# 7. pytest-covとpytest-htmlワークフローのトリガー

on:
  push:
    branches:
      - 'main'

jobs:
  test-and-deploy-testmon:
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        # mainブランチの最新コードをチェックアウト
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        # タイムゾーンを東京に設定
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        # Poetryをインストール
        run: pip install poetry

      - name: Install dependencies
        # プロジェクトの依存関係をインストール
        run: poetry install

      - name: Fetch previous testmon data
        # 以前のtestmonデータを取得し、現在の作業ディレクトリにセットアップ
        shell: bash
        run: |
          git fetch origin ghpages:ghpages || true
          git checkout ghpages -- testmon-data_${{ matrix.os }}/.testmondata || true
          if [ -f testmon-data_${{ matrix.os }}/.testmondata ]; then
            mv testmon-data_${{ matrix.os }}/.testmondata .testmondata
            rm -rf testmon-data_${{ matrix.os }}
          fi
        continue-on-error: true

      - name: Run tests with testmon
        # testmonを使用してテストを実行
        id: pytest-testmon
        run: poetry run pytest --testmon

      - name: Create testmon directory and move .testmondata
        # .testmondataファイルを保存するディレクトリを作成し、ファイルを移動
        shell: pwsh
        run: |
          $testmonDir = "testmon_data_${{ matrix.os }}"
          New-Item -ItemType Directory -Force -Path $testmonDir
          Move-Item -Path ".testmondata" -Destination "$testmonDir/.testmondata" -Force

      - name: Check testmon data
        # .testmondataファイルの存在を確認
        shell: pwsh
        run: |
          $testmonFile = Get-ChildItem -Path "testmon_data_${{ matrix.os }}" -Filter ".testmondata" -Recurse -ErrorAction SilentlyContinue -Force
          if ($testmonFile) {
            Write-Output "Testmon data file found at: $($testmonFile.FullName)"
            Write-Output "TESTMON_FILE_PATH=$($testmonFile.FullName)" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "Warning: Testmon data file (.testmondata) not found."
            exit 1
          }

      - name: Upload testmon data
        # 更新された.testmondataファイルをアーティファクトとしてアップロード
        uses: actions/upload-artifact@v4.4.0
        with:
          name: testmon-data-${{ matrix.os }}
          path: testmon_data_${{ matrix.os }}
        if: always()

  deploy-testmon:
    needs: test-and-deploy-testmon
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        # リポジトリをチェックアウト
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Download testmon data
        # 前のジョブでアップロードされたtestmonデータをダウンロード
        uses: actions/download-artifact@v4.1.8
        with:
          path: downloaded-artifacts

      - name: Setup Git
        # Gitの設定を行い、コミット用の情報をセット
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Deploy testmon data to GitHub Pages
        # testmonデータをGitHub Pagesにデプロイ
        id: deploy_testmon
        run: |
          git fetch origin ghpages:ghpages || git checkout -b ghpages
          git checkout ghpages

          changes_made=false
          for os in ubuntu-latest macos-13 windows-latest; do
            folder_name="testmon-data_${os}"
            artifact_folder="downloaded-artifacts/testmon-data-${os}"
            if [ -f "${artifact_folder}/.testmondata" ]; then
              echo "Changes detected for $os, updating..."
              mkdir -p $folder_name
              mv "${artifact_folder}/.testmondata" "$folder_name/"
              git add $folder_name
              changes_made=true
            else
              echo "No testmon data found for $os"
            fi
          done

          if [ "$changes_made" = true ]; then
            git commit -m "Update testmon data on GitHub Pages"
            git push origin ghpages
            echo "deploy_status=updated" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> $GITHUB_OUTPUT
          fi

      - name: List deployed files
        # デプロイされたファイルを確認
        if: steps.deploy_testmon.outputs.deploy_status == 'updated'
        run: |
          git checkout ghpages
          echo "Deployed testmon data files:"
          find . -name ".testmondata"

  trigger-other-workflows:
    needs: deploy-testmon
    runs-on: ubuntu-latest
    steps:
      - name: Trigger pytest-cov workflow
        # pytest-covワークフローをトリガー
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-cov

      - name: Trigger pytest-html workflow
        # pytest-htmlワークフローをトリガー
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-html
