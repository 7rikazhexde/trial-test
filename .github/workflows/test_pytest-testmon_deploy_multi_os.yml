name: pytest-testmon Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - mainブランチへのプッシュ
#    - Dependabotによる実行でないこと
#    - コミットメッセージが"Bump version"で始まっていないこと
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップと.testmondataの取得
# 3. pytest-testmonを使用してテストを実行
# 4. .testmondataファイルの確認と更新されたファイルのアップロード
# 5. GitHub Pagesへの.testmondataファイルのデプロイ
# 6. pytest-covとpytest-htmlワークフローのトリガー

on:
  push:
    branches:
      - 'main'

jobs:
  test-and-deploy-testmon:
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        # mainブランチの最新コードをチェックアウト
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        # 指定されたPythonバージョンをセットアップ
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        # タイムゾーンを東京に設定
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        # Poetryをインストール
        run: pip install poetry

      - name: Install dependencies
        # プロジェクトの依存関係をインストール
        run: poetry install

      - name: Fetch previous testmon data
        # 以前のtestmonデータを取得し、現在の作業ディレクトリにセットアップ
        shell: bash
        run: |
          git fetch origin ghpages:ghpages || true
          git checkout ghpages -- testmon-data_${{ matrix.os }}/.testmondata || true
          if [ -f testmon-data_${{ matrix.os }}/.testmondata ]; then
            mv testmon-data_${{ matrix.os }}/.testmondata .testmondata
            rm -rf testmon-data_${{ matrix.os }}
          fi
        continue-on-error: true

      - name: Run tests with testmon
        # testmonを使用してテストを実行し、.testmondataファイルの場所を確認
        id: pytest-testmon
        run: |
          poetry run task test_testmon
          echo "Listing current directory contents:"
          ls -la
          echo "Searching for .testmondata file:"
          find . -name ".testmondata"

      - name: Check testmon data
        # .testmondataファイルの存在を確認し、見つかった場合はその場所を記録
        shell: bash
        run: |
          TESTMON_FILE=$(find . -name ".testmondata" | head -n 1)
          if [ -n "$TESTMON_FILE" ]; then
            echo "Testmon data file found at: $TESTMON_FILE"
            echo "TESTMON_FILE_PATH=$TESTMON_FILE" >> $GITHUB_ENV
          else
            echo "Warning: Testmon data file (.testmondata) not found."
            exit 1
          fi

      - name: Upload testmon data
        # 更新された.testmondataファイルをアーティファクトとしてアップロード
        uses: actions/upload-artifact@v4.4.0
        with:
          name: testmon-data-${{ matrix.os }}
          path: ${{ env.TESTMON_FILE_PATH }}
        if: success()

  deploy-testmon:
    needs: test-and-deploy-testmon
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        # リポジトリをチェックアウト
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Download testmon data
        # 前のジョブでアップロードされたtestmonデータをダウンロード
        uses: actions/download-artifact@v4.1.8

      - name: Setup Git
        # Gitの設定を行い、コミット用の情報をセット
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Deploy testmon data to GitHub Pages
        # testmonデータをGitHub Pagesにデプロイ
        id: deploy_testmon
        run: |
          git fetch origin ghpages:ghpages || git checkout -b ghpages
          git checkout ghpages

          changes_made=false
          for os in ubuntu-latest macos-13 windows-latest; do
            folder_name="testmon-data_${os}"
            if [ -f testmon-data-$os/.testmondata ]; then
              echo "Changes detected for $os, updating..."
              mkdir -p $folder_name
              mv testmon-data-$os/.testmondata $folder_name/
              git add $folder_name
              changes_made=true
            else
              echo "No testmon data found for $os"
            fi
          done

          if [ "$changes_made" = true ]; then
            git commit -m "Update testmon data on GitHub Pages"
            git push origin ghpages
            echo "deploy_status=updated" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> $GITHUB_OUTPUT
          fi

  trigger-other-workflows:
    needs: deploy-testmon
    runs-on: ubuntu-latest
    steps:
      - name: Trigger pytest-cov workflow
        # pytest-covワークフローをトリガー
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-cov

      - name: Trigger pytest-html workflow
        # pytest-htmlワークフローをトリガー
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-html
