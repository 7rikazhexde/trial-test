name: pytest-testmon Deploy Multi-OS

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - mainブランチへのプッシュ時に起動
#    - Dependabotによる実行やバージョンバンプのコミットは除外
# 2. 複数の環境（OS、Pythonバージョン）でのセットアップと前回の.testmondataの取得
#    - Ubuntu, macOS, Windowsの最新バージョンで実行
#    - Python 3.12を使用
# 3. pytest-testmonを使用してテスト実行
#    - 前回の.testmondataがある場合、それを使用して差分テストを実行
# 4. testmon結果の確認とテスト実行有無の判定
#    - テストが実行された場合、後続のジョブをトリガー
# 5. .testmondataファイルの確認と指定フォルダへの移動
#    - テストが実行された場合のみ実行
# 6. 更新された.testmondataファイルのアップロード
#    - テストが実行された場合のみ実行
# 7. GitHub Pagesへの.testmondataファイルのデプロイ
#    - テストが実行され、かつ変更がある場合のみ実行
# 8. pytest-covとpytest-htmlワークフローのトリガー
#    - テストが実行された場合のみトリガー

on:
  push:
    branches:
      - 'main'

jobs:
  test-and-deploy-testmon:
    # Dependabotによる実行やバージョンバンプのコミットを除外
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        python-version: ['3.11', '3.12']
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    # ジョブの出力を定義（テスト実行の有無を後続のジョブに伝える）
    outputs:
      tests_executed: ${{ steps.check_testmon_results.outputs.tests_executed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"

      - name: Install poetry
        run: |
          pip install poetry
          echo "Poetry version: $(poetry --version)"

      - name: Install dependencies
        run: |
          poetry install
          echo "Installed dependencies:"
          poetry show --tree

      - name: Fetch previous testmon data
        shell: bash
        run: |
          echo "Fetching previous testmon data..."
          git fetch origin ghpages:ghpages || true
          git checkout ghpages -- testmon-data_${{ matrix.os }}/.testmondata || true
          if [ -f testmon-data_${{ matrix.os }}/.testmondata ]; then
            echo "Previous testmon data found. Moving to current directory."
            mv testmon-data_${{ matrix.os }}/.testmondata .testmondata
            rm -rf testmon-data_${{ matrix.os }}
          else
            echo "No previous testmon data found."
          fi
        continue-on-error: true

      - name: Run tests with testmon
        id: pytest-testmon
        shell: bash
        run: |
          echo "Running tests with testmon..."
          output=$(poetry run pytest --testmon -v)
          echo "$output"

          # testmonの出力をGitHub Actionsの出力変数に保存
          echo "testmon_output<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # 出力を確認して、テストが実行されなかった場合はフラグを設定
          if echo "$output" | grep -q "collected 0 items"; then
           echo "No tests executed. Skipping deployment and further workflows."
           echo "tests_executed=false" >> $GITHUB_OUTPUT
          else
           echo "Tests executed. Proceeding with deployment and further workflows."
           echo "tests_executed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check testmon results
        id: check_testmon_results
        shell: bash
        run: |
          output="${{ steps.pytest-testmon.outputs.testmon_output }}"
          if echo "$output" | grep -q "collected 0 items"; then
            echo "No tests executed. Skipping deployment and further workflows."
            echo "tests_executed=false" >> $GITHUB_OUTPUT
          else
            echo "Tests executed. Proceeding with deployment and further workflows."
            echo "tests_executed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create testmon directory and move .testmondata
        shell: bash
        run: |
          echo "Creating testmon directory..."
          testmon_dir="testmon_data_${{ matrix.os }}"
          mkdir -p "$testmon_dir"
          echo "Moving .testmondata file..."
          if [ -f ".testmondata" ]; then
            mv ".testmondata" "$testmon_dir/.testmondata" && echo "File moved successfully." || echo "Failed to move file."
          else
            echo "Warning: .testmondata file not found in root directory."
          fi
          echo "Contents of $testmon_dir:"
          ls -la "$testmon_dir"

      - name: Upload testmon data
        uses: actions/upload-artifact@v4.4.0
        with:
          name: testmon-data-${{ matrix.os }}
          path: testmon_data_${{ matrix.os }}/.testmondata
          if-no-files-found: warn
          include-hidden-files: true
        if: steps.check_testmon_results.outputs.tests_executed == 'true'

  deploy-testmon:
    needs: test-and-deploy-testmon
    # テストが実行された場合のみ、このジョブを実行
    if: needs.test-and-deploy-testmon.outputs.tests_executed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Download testmon data
        uses: actions/download-artifact@v4.1.8
        with:
          path: downloaded-artifacts

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "Git configuration set."

      - name: Deploy testmon data to GitHub Pages
        id: deploy_testmon
        run: |
          echo "Deploying testmon data to GitHub Pages..."
          git fetch origin ghpages:ghpages || git checkout -b ghpages
          git checkout ghpages

          changes_made=false
          for os in ubuntu-latest macos-13 windows-latest; do
            folder_name="testmon-data_${os}"
            artifact_folder="downloaded-artifacts/testmon-data-${os}"
            echo "Processing $os..."
            if [ -f "${artifact_folder}/.testmondata" ]; then
              echo "Changes detected for $os, updating..."
              mkdir -p $folder_name
              mv "${artifact_folder}/.testmondata" "$folder_name/"
              git add $folder_name
              changes_made=true
            else
              echo "No testmon data found for $os"
              echo "Contents of ${artifact_folder}:"
              ls -la "${artifact_folder}"
            fi
          done

          if [ "$changes_made" = true ]; then
            echo "Changes made, committing and pushing..."
            git commit -m "Update testmon data on GitHub Pages"
            git push origin ghpages
            echo "deploy_status=updated" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "deploy_status=unchanged" >> $GITHUB_OUTPUT
          fi

      - name: List deployed files
        if: steps.deploy_testmon.outputs.deploy_status == 'updated'
        run: |
          git checkout ghpages
          echo "Deployed testmon data files:"
          find . -name ".testmondata"
          echo "Contents of ghpages branch:"
          ls -R

  trigger-other-workflows:
    needs: [test-and-deploy-testmon, deploy-testmon]
    # テストが実行された場合のみ、このジョブを実行
    if: needs.test-and-deploy-testmon.outputs.tests_executed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger pytest-cov workflow
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-cov
          client-payload: '{"skip_tests": false}'

      - name: Trigger pytest-html workflow
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          event-type: run-pytest-html
          client-payload: '{"skip_tests": false}'

      - name: Log workflow triggers
        run: |
          echo "Triggered pytest-cov and pytest-html workflows."
          echo "Check the Actions tab for these workflows to start."
