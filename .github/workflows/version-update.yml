name: Version Update and Release

# ワークフローの処理の流れ:
# 1. 手動トリガーによるワークフロー開始
# 2. バージョン更新タイプとリリース作成の有無を指定
# 3. Pythonとpoetryのセットアップ
# 4. 現在のバージョンの取得
# 5. 指定されたタイプに基づくバージョンの更新
# 6. 更新されたバージョンのコミットとプッシュ
# 7. 新しいGitタグの作成とプッシュ
# 8. （オプション）リリースワークフローのトリガー

on:
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of version update'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create release after version update'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Get current version
        id: current_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Update version
        id: update_version
        run: |
          poetry version ${{ github.event.inputs.update_type }}
          echo "new_version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Commit and push if changed
        run: |
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.update_version.outputs.new_version }}" || echo "No changes to commit"
          git push
      - name: Create and push new tag
        run: |
          git tag v${{ steps.update_version.outputs.new_version }}
          git push --tags

  trigger-release:
    needs: update-version
    if: github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get updated version
        id: get_version
        run: echo "new_version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.get_version.outputs.new_version }}'
              }
            })
