name: PR Check (Except Dependabot)

# ワークフローの処理の流れ:
# 1. トリガー条件:
#    - mainブランチへのプルリクエスト時
#    - Dependabotによる実行ではないこと
#    - コミットメッセージが"Bump version"で始まっていないこと
#    - ブランチ名に"version-update"が含まれていないこと
# 2. ジョブの条件判定: Dependabot によるPRかチェック
# 3. OS毎の環境設定
# 4. リポジトリのチェックアウト
# 5. Python環境のセットアップ (3.11,3.12)
# 6. 依存関係のキャッシュ
# 7. Poetry のインストール
# 8. プロジェクト依存関係のインストール
# 9. テストの実行
# 10. テスト結果の集約
# 11. 集約された結果のコメント投稿
# 12. 最終ステータスの確認と通知

on:
  pull_request:
    branches: "main"

jobs:
  test:
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version') && !contains(github.ref, 'version-update')
    strategy:
      matrix:
        os: [macos-13, ubuntu-latest, windows-latest]
        python-version: ['3.11', '3.12']
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
      - name: Set timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Tokyo"
          timezoneMacos: "Asia/Tokyo"
          timezoneWindows: "Tokyo Standard Time"
      - name: Check timezone
        shell: bash
        run: |
          echo "System date: $(date)"
          echo "TZ environment variable: $TZ"
          python -c "import datetime, platform; print(f'Python timezone: {datetime.datetime.now().astimezone().tzinfo}'); print(f'OS: {platform.system()}')"
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run test
        id: pytest
        continue-on-error: true
        run: poetry run task test_gh_action_xml
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report (${{ matrix.os }} / Python ${{ matrix.python-version }})
          badge-title: coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./pytest.xml
          junitxml-title: "Pytest Result Summary (os: ${{ matrix.os }} / python-version: ${{ matrix.python-version }})"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will prevent merging the pull request."
          exit 1
      - name: Save summary report
        run: |
          echo '${{ steps.coverageComment.outputs.summaryReport }}' > summary-report.md
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            pytest-coverage.txt
            coverage.xml
            pytest.xml
            summary-report.md

  aggregate-results:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Update README in coverage branch
        run: |
          # aggregated_results.mdのヘッダーとバッジを追加
          echo "# Coverage Reports" > aggregated_results.md
          echo "[![](https://github.com/$GITHUB_REPOSITORY/actions/workflows/pullrequest_check.yml.yml/badge.svg)](https://github.com/$GITHUB_REPOSITORY/actions/workflows/pullrequest_check.yml.yml)" >> aggregated_results.md
          echo "" >> aggregated_results.md

          # 最新のコミット情報をREADMEに追加
          commit_hash8=${GITHUB_SHA::8}
          commit_link="[$commit_hash8](https://github.com/$GITHUB_REPOSITORY/tree/$commit_hash8)"
          echo -e "> [!Note]" >> aggregated_results.md
          echo -e "> " >> aggregated_results.md
          echo -e "> Commit: $commit_link" >> aggregated_results.md
          echo -e "" >> aggregated_results.md

          # macOS、Ubuntu、Windowsの各OSとPythonバージョンごとにカバレッジレポートを追加
          for os in macos-13 ubuntu-latest windows-latest; do
            for version in 3.11 3.12; do
              echo "## Coverage Report (os: $os / python-version: $version)" >> aggregated_results.md
              if [ -f "coverage-data-$os-$version/summary-report.md" ]; then
                sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g' -e 's/\\\\/\\/g' -e 's/\\n/\n/g' -e 's/\r$//' "coverage-data-$os-$version/summary-report.md" |
                sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/\&/g' |
                sed '/^$/N;/^\n$/D' |
                sed -e 's/^"//' -e 's/"$//' >> aggregated_results.md
              else
                echo "No summary report found for $os - $version" >> aggregated_results.md
              fi
              echo "" >> aggregated_results.md
            done
          done

          # カバレッジレポート内のリンクを有効にするためにファイルパスを修正する
          sed -i '
            s|/blob/\([a-f0-9]*\)/\([^"]*\)|/blob/\1/project_a/\2|g;
            s|/blob/\([a-f0-9]*\)/project_a/README\.md|/blob/\1/aggregated_results.md|g
          ' aggregated_results.md
      - name: Create coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./aggregated_results.md
          title: Aggregated Coverage Report (PR Check - Except Dependabot)
          badge-title: coverage
          github-token: ${{ secrets.GITHUB_TOKEN }}

  check_all_tests:
    needs: test
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version') && !contains(github.ref, 'version-update')
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  send_notification:
    needs: [test, check_all_tests, aggregate-results]
    if: github.actor != 'dependabot[bot]' && !startsWith(github.event.head_commit.message, 'Bump version') && !contains(github.ref, 'version-update')
    runs-on: ubuntu-latest
    steps:
      - name: Send LINE Notify
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          status="${{ contains(needs.test.result, 'failure') && 'FAILED' || 'SUCCESS' }}"
          message="'dependabot_prch' workflow completed with status: $status

          Check URL:
          https://github.com/7rikazhexde/trial-test/actions/workflows/dependabot_prch.yml"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"
