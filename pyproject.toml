[tool.poetry]
name = "trial-test"
version = "0.2.157"
description = "An experimental project to test out various tools."
authors = ["7rikaz"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "project_a" },
]
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
mdformat = "^0.7.16"
numpy = "^1.26.2"
pandas = "^2.2.2"
requests = "^2.32.3"
dash = "^2.18.1"
aiohttp = "^3.10.5"
types-requests = "^2.32.0.20240907"
dash-bootstrap-components = "^1.6.0"
pytoniq-core = "^0.1.39"
babel = "^2.16.0"
httpx = "^0.27.2"
python-dotenv = "^1.0.1"
freezegun = "^1.5.1"
tomlkit = "^0.13.2"
pytonapi = "^0.4.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.2"
flake8 = "^6.0.0"
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.3.0"
flake8-pyproject = "^1.2.3"
pytest = "^7.3.1"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.1"
pytest-html = "^4.1.1"
ruff = "^0.5.6"
taskipy = "^1.13.0"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.23.8"
dash = {extras = ["testing"], version = "^2.17.1"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
tdctest1 = "pytest -s -vv --cov=. --cov-branch --cov-report term-missing --cov-report html"
tdctest2 = "pytest --html=htmlcov/report_page.html"
test_gh_action_xml = "python scripts/run_tests.py --report xml"
test_gh_action_term = "python scripts/run_tests.py --report term"

[tool.isort]

[tool.black]
target-version = ['py310']

[tool.flake8]
ignore = ["E402","E501","W503"]

[tool.ruff]
# Check Rules
lint.select = ["E", "F", "I"]
# Ignore Error
lint.ignore = ["E402","E501"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
lint.per-file-ignores = {}

# Assume Python 3.10.
target-version = "py310"

[tool.mypy]
files = ["project_a"]
python_version = "3.12"
show_error_context = true
show_column_numbers = true
# Do not check import destinations (by default, even third-party libraries are checked)
ignore_missing_imports = true
# Type annotation required for arguments/return values in function definitions
disallow_untyped_defs = true
# Optional required for type annotation if default argument is None
no_implicit_optional = true
# Warning when the type annotation of the return value of a function whose return value is not of type Any is Any
warn_return_any = true
# Warning if `# type: ignore` comment is given to a place that does not correspond to a mypy error.
# * If `# type: ignore` is given, mypy errors can be ignored.
warn_unused_ignores = true
# Warning for redundant casts
warn_redundant_casts = true

[tool.pytest.ini_options]
testpaths = ["project_a", "tests"]
pythonpath = ["."]
addopts = "--cov=project_a --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["project_a"]
omit = ["project_a/staking/ton_whales_staking_dashboard.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "def main"
]

[tool.coverage.html]
directory = "htmlcov"
