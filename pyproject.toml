[tool.poetry]
name = "python-project-sandbox"
version = "1.0.29"
description = "An experimental project to test out various tools."
authors = ["7rikaz"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
mdformat = "^0.7.16"
numpy = "2.1.2"
pandas = "^2.2.2"
requests = "^2.32.3"
dash = "^2.18.1"
aiohttp = "^3.10.6"
types-requests = "^2.32.0.20240907"
dash-bootstrap-components = "^1.6.0"
pytoniq-core = "^0.1.39"
babel = "^2.16.0"
httpx = "^0.27.2"
python-dotenv = "^1.0.1"
freezegun = "^1.5.1"
tomlkit = "^0.13.2"
pytonapi = "^0.4.1"
types-pytz = "^2024.2.0.20240913"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.0"
mypy = "^1.3.0"
taskipy = "^1.13.0"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.1"
pytest-html = "^4.1.1"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.24.0"
ruff = "^0.6.8"
pytest-testmon = "^2.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.tasks]
test_coverage_verbose = "pytest -s -vv --cov=. --cov-branch --cov-report term-missing --cov-report html"
test_html_report = "pytest --html=htmlcov/report_page.html"
test_ci_xml = "python scripts/run_tests.py --report xml"
test_ci_term = "python scripts/run_tests.py --report term"
test_testmon = "pytest --testmon"
test_coverage = "pytest --cov=. --cov-branch --cov-report=term-missing --cov-report=html"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E402", "E501"]
per-file-ignores = {}

[tool.mypy]
files = ["project_a", "tests", "ci", "scripts"]
python_version = "3.12"
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = ["pytz.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["project_a", "tests"]
pythonpath = ["."]

# [warning]
# .venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
# The event loop scope for asynchronous fixtures will default to the fixture caching scope.
# Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope.
# Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future.
# Valid fixture loop scopes are: "function", "class", "module", "package", "session"
#
#  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
# pytest-asyncio が自動的に非同期テストを検出して実行する
asyncio_mode = "auto"
# 非同期フィクスチャのデフォルトループスコープが "function" に設定する
asyncio_default_fixture_loop_scope = "function"

# [warning]
# .venv/lib/python3.12/site-packages/testmon/pytest_testmon.py:461: PytestRemovedIn9Warning:
# The (path: py.path.local) argument is deprecated, please use (collection_path: pathlib.Path)
# see https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path
#   def pytest_ignore_collect(self, path, config):
#
# 暫定対応としてPytestRemovedIn9Warningをignoreに追加したいが追加しても非表示にならないので対応を待つ
# URL: https://github.com/tarpas/pytest-testmon/issues/237
filterwarnings = [
    #"ignore::pytest.PytestRemovedIn9Warning:testmon.*:",
    "ignore::pytest.PytestRemovedIn9Warning",
]

# poetry run pytestの場合は以下のオプションが有効になる
# CIでは明示的に引数指定して実行するため無効にする（コメントアウトする）
#addopts = "--cov=project_a --cov-report=term-missing --cov-report=html"


[tool.coverage.run]
source = ["project_a"]
omit = ["project_a/staking/ton_whales_staking_dashboard.py"]
# testmonとpytest-covの互換性の問題に対応するため明示的にfalseにする
# testmonとpytest-covは、どちらもPythonコードの実行を追跡するために内部的にトレーシングメカニズムを使用する。
# branch coverageが有効な場合、pytest-covはより詳細なトレーシングを行うが、testmonの動作と競合する。これはtestmonの制限である。
branch = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "def main"
]

[tool.coverage.html]
directory = "htmlcov"
